---
title: "Langlauf"
author: 
- name: Kaspar Rufibach
  affiliation: Meiringen
date: "Letzte Aenderung: `r format(Sys.time(), '%d %B, %Y')`"
output: 
  rmarkdown::html_document:
    highlight: pygments
    number_sections: yes
    self_contained: yes
    toc: yes
    toc_depth: 3
    toc_float: yes
---

```{r setup, include=FALSE}
options(warn = -1)

## load packages
packs.html <- c("knitr", "pander", "reporttools", "dplyr", "lubridate", "readxl", "tibble", "summarytools", "ggplot2")
for (i in 1:length(packs.html)){library(packs.html[i], character.only = TRUE)}

knitr::opts_chunk$set(echo = TRUE)

path <- "C:/rufibach/01_personal/05_Sport/40_reporting/"
path <- paste(getwd(), "/", sep = "")

source(paste(path, "/functions/input_touren.r", sep = ""))
source(paste(path, "/functions/hm_print.r", sep = ""))

## =================================================================
## input data
## =================================================================
cy <- as.character(read_excel(paste(path, "data/currentyear.xlsx", sep = "")))
s <- as.numeric(substr(cy, 3, 4))

touren <- input_touren(path)
                  
# Langlaufen
all <- (touren %>% mutate(skihalbtag = NULL, skihalbtag_fam = NULL, begleitung1 = NULL, 
                          begleitung2 = NULL, begleitung3 = NULL, begleitung4 = NULL, beg = NULL,
                          region = NULL, kommentar = NULL) %>% filter(sport == "Langlauf") %>% arrange(end, time))
ski <- (all %>% select(start, end, date, time, startend))
tour <- sort(unique(ski$startend))

ski_season <- (all %>% filter(date >= "2013-12-31") %>% arrange(date, desc(time)) %>% group_by(date) %>% slice(1) %>%
                 arrange(season) %>% group_by(season) %>% 
                 summarise(n = sum(is.na(unique(date)) == FALSE), Hm = sum(hm_diff, na.rm = TRUE))) %>% 
                 mutate(Hm_tour = round(Hm / n)) %>% arrange(season)
```

# Anzahl Touren pro Saison

```{r, echo = FALSE, fig.cap = "", fig.align = "center", fig.width = 5, fig.height = 3}
ggplot(data = ski_season, aes(x = season, y = n, group = 1)) +
geom_line(color = "red") +
geom_point() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(x = "Saison", y = "Anzahl Touren")
```

# Höhenmeter pro Saison

```{r, echo = FALSE, fig.cap = "", fig.align = "center", fig.width = 5, fig.height = 3}
ggplot(data = ski_season, aes(x = season, y = Hm, group = 1)) +
geom_line(color = "red") +
geom_point() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(x = "Saison", y = "Höhenmeter")
```

# Aktuelle Saison {.tabset .tabset-fade .tabset-pills}

## Tage auf Langlauf-Ski total

```{r echo = FALSE, message = FALSE, warning = FALSE, results = "asis", eval = TRUE}
f4 <- with(touren, data.frame(date, tour = as.numeric(sport == "Langlauf"), season))
f5 <- f4[f4$season == levels(with(touren, season))[s], ]
f5$any <- with(f5, pmax(tour, na.rm = TRUE))
f5_dat <- f5[f5$any == 1, "date"]
skidays <- length(unique(f5_dat))
```

Total Langlauftage: `r skidays`.

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
t <- (touren %>% filter(sport == "Langlauf" & season == paste("Winter ", s - 1, "/", s, sep = "")))
```

- Anzahl Tourentage: `r tail(ski_season, 1)$n`. 
- Total Hoehenmeter: `r disp(tail(ski_season, 1)$Hm, 0)`.


## Nach Datum

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
t1 <- (t %>% arrange(date, desc(time)) %>% group_by(date) %>% slice(1) %>% rowid_to_column("Nr") %>% mutate(km = km_manual) %>% select(start, end, date, hm_diff, km))
pander(t1)
```


# Skimodell

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
all_m <- (all %>% filter(date >= "2023-12-31" & date <= "2025-08-31") %>% arrange(date) %>% group_by(date) %>% slice(1) %>% 
            mutate(season = as.character(season)) %>% arrange(season))
with(all_m, ctable(x = season, y = modell, useNA = "no", 
       prop = "t", totals = TRUE, headings = FALSE, method = "render"))
```

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
sum_mod <- (all_m %>% arrange(modell) %>% group_by(modell) %>% summarise(Hm = sum(hm_diff, na.rm = TRUE)))
kable(sum_mod)
```


# Skischuh

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
all_m <- (all %>% filter(date >= "2023-12-31" & date <= "2025-08-31") %>% arrange(date) %>% group_by(date) %>% slice(1) %>% 
            mutate(season = as.character(season)) %>% arrange(season))
with(all_m, ctable(x = season, y = schuh, useNA = "no", 
       prop = "t", totals = TRUE, headings = FALSE, method = "render"))
```

```{r, echo = FALSE, results = 'asis', message = FALSE, eval = TRUE}
sum_mod <- (all_m %>% arrange(schuh) %>% group_by(schuh) %>% summarise(Hm = sum(hm_diff, na.rm = TRUE)))
kable(sum_mod)
```

# Touren nach Ziel

Dieser Abschnitt listet die Touren auf, chronologisch oder nach Laufzeit. Fuer die Listen nach Zeit werden die Touren ohne Zeitangabe nicht aufgefuehrt.

```{r echo = FALSE, message = FALSE, warning = FALSE, results = "asis"}

# how to do this with child documents: https://gist.github.com/rmoff/a043676a2f084b81a434

out <- NULL
for (i in 1:length(tour)){
  out <- c(out, knit_expand('_tour_summary.qmd'))
}

cat(knit(text = unlist(paste(out, collapse = '\n')), quiet = TRUE))
```

